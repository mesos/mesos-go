// Code generated by protoc-gen-gogo.
// source: module.proto
// DO NOT EDIT!

package mesosproto

import proto "github.com/gogo/protobuf/proto"
import math "math"

// discarding unused import gogoproto "github.com/gogo/protobuf/gogoproto/gogo.pb"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

// *
// Collection of module libraries. A module library (Modules::Library) is a
// shared dynamic library (.so/.dylib) that contains one or more modules
// (Modules::Library::Module).  Each module may have module-specific parameters
// in the form of key-value.
type Modules struct {
	Libraries        []*Modules_Library `protobuf:"bytes,1,rep,name=libraries" json:"libraries,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *Modules) Reset()         { *m = Modules{} }
func (m *Modules) String() string { return proto.CompactTextString(m) }
func (*Modules) ProtoMessage()    {}

func (m *Modules) GetLibraries() []*Modules_Library {
	if m != nil {
		return m.Libraries
	}
	return nil
}

type Modules_Library struct {
	// If "file" contains a slash ("/"), then it is interpreted as a
	// (relative or absolute) pathname.  Otherwise a standard library
	// search is performed.
	File *string `protobuf:"bytes,1,opt,name=file" json:"file,omitempty"`
	// We will add the proper prefix ("lib") and suffix (".so" for
	// Linux and ".dylib" for OS X) to the "name".
	Name             *string                   `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Modules          []*Modules_Library_Module `protobuf:"bytes,3,rep,name=modules" json:"modules,omitempty"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *Modules_Library) Reset()         { *m = Modules_Library{} }
func (m *Modules_Library) String() string { return proto.CompactTextString(m) }
func (*Modules_Library) ProtoMessage()    {}

func (m *Modules_Library) GetFile() string {
	if m != nil && m.File != nil {
		return *m.File
	}
	return ""
}

func (m *Modules_Library) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Modules_Library) GetModules() []*Modules_Library_Module {
	if m != nil {
		return m.Modules
	}
	return nil
}

type Modules_Library_Module struct {
	// Module name.
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Module-specific parameters.
	Parameters       []*Parameter `protobuf:"bytes,2,rep,name=parameters" json:"parameters,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *Modules_Library_Module) Reset()         { *m = Modules_Library_Module{} }
func (m *Modules_Library_Module) String() string { return proto.CompactTextString(m) }
func (*Modules_Library_Module) ProtoMessage()    {}

func (m *Modules_Library_Module) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Modules_Library_Module) GetParameters() []*Parameter {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func init() {
}
