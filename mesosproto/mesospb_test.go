// Code generated by protoc-gen-gogo.
// source: mesos.proto
// DO NOT EDIT!

package mesosproto

import testing7 "testing"
import math_rand7 "math/rand"
import time7 "time"
import github_com_gogo_protobuf_proto4 "github.com/gogo/protobuf/proto"
import testing8 "testing"
import math_rand8 "math/rand"
import time8 "time"
import encoding_json1 "encoding/json"
import testing9 "testing"
import math_rand9 "math/rand"
import time9 "time"
import github_com_gogo_protobuf_proto5 "github.com/gogo/protobuf/proto"
import math_rand10 "math/rand"
import time10 "time"
import testing10 "testing"
import fmt2 "fmt"
import math_rand11 "math/rand"
import time11 "time"
import testing11 "testing"
import github_com_gogo_protobuf_proto6 "github.com/gogo/protobuf/proto"
import math_rand12 "math/rand"
import time12 "time"
import testing12 "testing"
import fmt3 "fmt"
import go_parser1 "go/parser"
import math_rand13 "math/rand"
import time13 "time"
import testing13 "testing"
import github_com_gogo_protobuf_proto7 "github.com/gogo/protobuf/proto"

func TestFrameworkIDProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedFrameworkID(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &FrameworkID{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestFrameworkIDMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedFrameworkID(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &FrameworkID{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkFrameworkIDProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*FrameworkID, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedFrameworkID(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkFrameworkIDProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedFrameworkID(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &FrameworkID{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestOfferIDProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedOfferID(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &OfferID{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestOfferIDMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedOfferID(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &OfferID{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkOfferIDProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*OfferID, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedOfferID(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkOfferIDProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedOfferID(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &OfferID{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestSlaveIDProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedSlaveID(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &SlaveID{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestSlaveIDMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedSlaveID(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &SlaveID{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkSlaveIDProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*SlaveID, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedSlaveID(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkSlaveIDProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedSlaveID(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &SlaveID{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestTaskIDProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedTaskID(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &TaskID{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestTaskIDMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedTaskID(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &TaskID{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkTaskIDProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*TaskID, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedTaskID(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkTaskIDProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedTaskID(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &TaskID{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestExecutorIDProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedExecutorID(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &ExecutorID{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestExecutorIDMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedExecutorID(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &ExecutorID{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkExecutorIDProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*ExecutorID, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedExecutorID(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkExecutorIDProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedExecutorID(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &ExecutorID{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestContainerIDProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedContainerID(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &ContainerID{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestContainerIDMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedContainerID(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &ContainerID{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkContainerIDProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*ContainerID, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedContainerID(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkContainerIDProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedContainerID(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &ContainerID{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestFrameworkInfoProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedFrameworkInfo(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &FrameworkInfo{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestFrameworkInfoMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedFrameworkInfo(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &FrameworkInfo{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkFrameworkInfoProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*FrameworkInfo, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedFrameworkInfo(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkFrameworkInfoProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedFrameworkInfo(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &FrameworkInfo{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestHealthCheckProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedHealthCheck(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &HealthCheck{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestHealthCheckMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedHealthCheck(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &HealthCheck{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkHealthCheckProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*HealthCheck, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedHealthCheck(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkHealthCheckProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedHealthCheck(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &HealthCheck{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestHealthCheck_HTTPProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedHealthCheck_HTTP(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &HealthCheck_HTTP{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestHealthCheck_HTTPMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedHealthCheck_HTTP(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &HealthCheck_HTTP{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkHealthCheck_HTTPProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*HealthCheck_HTTP, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedHealthCheck_HTTP(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkHealthCheck_HTTPProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedHealthCheck_HTTP(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &HealthCheck_HTTP{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestCommandInfoProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedCommandInfo(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &CommandInfo{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestCommandInfoMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedCommandInfo(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &CommandInfo{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkCommandInfoProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*CommandInfo, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedCommandInfo(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkCommandInfoProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedCommandInfo(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &CommandInfo{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestCommandInfo_URIProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedCommandInfo_URI(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &CommandInfo_URI{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestCommandInfo_URIMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedCommandInfo_URI(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &CommandInfo_URI{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkCommandInfo_URIProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*CommandInfo_URI, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedCommandInfo_URI(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkCommandInfo_URIProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedCommandInfo_URI(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &CommandInfo_URI{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestCommandInfo_ContainerInfoProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedCommandInfo_ContainerInfo(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &CommandInfo_ContainerInfo{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestCommandInfo_ContainerInfoMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedCommandInfo_ContainerInfo(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &CommandInfo_ContainerInfo{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkCommandInfo_ContainerInfoProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*CommandInfo_ContainerInfo, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedCommandInfo_ContainerInfo(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkCommandInfo_ContainerInfoProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedCommandInfo_ContainerInfo(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &CommandInfo_ContainerInfo{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestExecutorInfoProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedExecutorInfo(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &ExecutorInfo{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestExecutorInfoMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedExecutorInfo(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &ExecutorInfo{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkExecutorInfoProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*ExecutorInfo, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedExecutorInfo(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkExecutorInfoProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedExecutorInfo(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &ExecutorInfo{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestMasterInfoProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedMasterInfo(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &MasterInfo{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestMasterInfoMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedMasterInfo(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &MasterInfo{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkMasterInfoProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*MasterInfo, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedMasterInfo(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkMasterInfoProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedMasterInfo(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &MasterInfo{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestSlaveInfoProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedSlaveInfo(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &SlaveInfo{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestSlaveInfoMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedSlaveInfo(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &SlaveInfo{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkSlaveInfoProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*SlaveInfo, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedSlaveInfo(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkSlaveInfoProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedSlaveInfo(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &SlaveInfo{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestValueProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedValue(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Value{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestValueMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedValue(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &Value{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkValueProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*Value, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedValue(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkValueProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedValue(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &Value{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestValue_ScalarProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedValue_Scalar(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Value_Scalar{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestValue_ScalarMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedValue_Scalar(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &Value_Scalar{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkValue_ScalarProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*Value_Scalar, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedValue_Scalar(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkValue_ScalarProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedValue_Scalar(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &Value_Scalar{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestValue_RangeProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedValue_Range(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Value_Range{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestValue_RangeMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedValue_Range(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &Value_Range{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkValue_RangeProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*Value_Range, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedValue_Range(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkValue_RangeProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedValue_Range(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &Value_Range{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestValue_RangesProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedValue_Ranges(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Value_Ranges{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestValue_RangesMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedValue_Ranges(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &Value_Ranges{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkValue_RangesProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*Value_Ranges, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedValue_Ranges(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkValue_RangesProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedValue_Ranges(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &Value_Ranges{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestValue_SetProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedValue_Set(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Value_Set{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestValue_SetMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedValue_Set(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &Value_Set{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkValue_SetProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*Value_Set, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedValue_Set(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkValue_SetProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedValue_Set(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &Value_Set{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestValue_TextProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedValue_Text(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Value_Text{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestValue_TextMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedValue_Text(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &Value_Text{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkValue_TextProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*Value_Text, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedValue_Text(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkValue_TextProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedValue_Text(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &Value_Text{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestAttributeProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedAttribute(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Attribute{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestAttributeMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedAttribute(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &Attribute{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkAttributeProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*Attribute, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedAttribute(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkAttributeProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedAttribute(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &Attribute{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestResourceProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedResource(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Resource{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestResourceMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedResource(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &Resource{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkResourceProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*Resource, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedResource(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkResourceProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedResource(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &Resource{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestResource_DiskInfoProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedResource_DiskInfo(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Resource_DiskInfo{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestResource_DiskInfoMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedResource_DiskInfo(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &Resource_DiskInfo{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkResource_DiskInfoProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*Resource_DiskInfo, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedResource_DiskInfo(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkResource_DiskInfoProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedResource_DiskInfo(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &Resource_DiskInfo{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestResource_DiskInfo_PersistenceProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedResource_DiskInfo_Persistence(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Resource_DiskInfo_Persistence{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestResource_DiskInfo_PersistenceMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedResource_DiskInfo_Persistence(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &Resource_DiskInfo_Persistence{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkResource_DiskInfo_PersistenceProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*Resource_DiskInfo_Persistence, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedResource_DiskInfo_Persistence(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkResource_DiskInfo_PersistenceProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedResource_DiskInfo_Persistence(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &Resource_DiskInfo_Persistence{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestResourceStatisticsProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedResourceStatistics(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &ResourceStatistics{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestResourceStatisticsMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedResourceStatistics(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &ResourceStatistics{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkResourceStatisticsProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*ResourceStatistics, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedResourceStatistics(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkResourceStatisticsProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedResourceStatistics(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &ResourceStatistics{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestResourceUsageProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedResourceUsage(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &ResourceUsage{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestResourceUsageMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedResourceUsage(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &ResourceUsage{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkResourceUsageProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*ResourceUsage, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedResourceUsage(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkResourceUsageProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedResourceUsage(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &ResourceUsage{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestPerfStatisticsProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedPerfStatistics(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &PerfStatistics{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestPerfStatisticsMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedPerfStatistics(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &PerfStatistics{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkPerfStatisticsProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*PerfStatistics, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedPerfStatistics(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkPerfStatisticsProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedPerfStatistics(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &PerfStatistics{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestRequestProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedRequest(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Request{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestRequestMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedRequest(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &Request{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkRequestProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*Request, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedRequest(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkRequestProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedRequest(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &Request{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestOfferProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedOffer(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Offer{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestOfferMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedOffer(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &Offer{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkOfferProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*Offer, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedOffer(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkOfferProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedOffer(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &Offer{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestOffer_OperationProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedOffer_Operation(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Offer_Operation{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestOffer_OperationMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedOffer_Operation(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &Offer_Operation{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkOffer_OperationProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*Offer_Operation, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedOffer_Operation(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkOffer_OperationProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedOffer_Operation(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &Offer_Operation{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestOffer_Operation_LaunchProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedOffer_Operation_Launch(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Offer_Operation_Launch{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestOffer_Operation_LaunchMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedOffer_Operation_Launch(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &Offer_Operation_Launch{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkOffer_Operation_LaunchProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*Offer_Operation_Launch, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedOffer_Operation_Launch(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkOffer_Operation_LaunchProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedOffer_Operation_Launch(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &Offer_Operation_Launch{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestOffer_Operation_ReserveProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedOffer_Operation_Reserve(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Offer_Operation_Reserve{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestOffer_Operation_ReserveMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedOffer_Operation_Reserve(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &Offer_Operation_Reserve{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkOffer_Operation_ReserveProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*Offer_Operation_Reserve, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedOffer_Operation_Reserve(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkOffer_Operation_ReserveProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedOffer_Operation_Reserve(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &Offer_Operation_Reserve{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestOffer_Operation_UnreserveProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedOffer_Operation_Unreserve(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Offer_Operation_Unreserve{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestOffer_Operation_UnreserveMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedOffer_Operation_Unreserve(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &Offer_Operation_Unreserve{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkOffer_Operation_UnreserveProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*Offer_Operation_Unreserve, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedOffer_Operation_Unreserve(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkOffer_Operation_UnreserveProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedOffer_Operation_Unreserve(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &Offer_Operation_Unreserve{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestOffer_Operation_CreateProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedOffer_Operation_Create(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Offer_Operation_Create{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestOffer_Operation_CreateMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedOffer_Operation_Create(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &Offer_Operation_Create{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkOffer_Operation_CreateProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*Offer_Operation_Create, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedOffer_Operation_Create(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkOffer_Operation_CreateProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedOffer_Operation_Create(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &Offer_Operation_Create{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestOffer_Operation_DestroyProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedOffer_Operation_Destroy(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Offer_Operation_Destroy{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestOffer_Operation_DestroyMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedOffer_Operation_Destroy(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &Offer_Operation_Destroy{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkOffer_Operation_DestroyProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*Offer_Operation_Destroy, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedOffer_Operation_Destroy(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkOffer_Operation_DestroyProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedOffer_Operation_Destroy(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &Offer_Operation_Destroy{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestTaskInfoProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedTaskInfo(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &TaskInfo{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestTaskInfoMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedTaskInfo(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &TaskInfo{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkTaskInfoProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*TaskInfo, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedTaskInfo(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkTaskInfoProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedTaskInfo(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &TaskInfo{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestTaskStatusProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedTaskStatus(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &TaskStatus{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestTaskStatusMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedTaskStatus(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &TaskStatus{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkTaskStatusProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*TaskStatus, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedTaskStatus(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkTaskStatusProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedTaskStatus(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &TaskStatus{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestFiltersProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedFilters(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Filters{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestFiltersMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedFilters(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &Filters{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkFiltersProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*Filters, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedFilters(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkFiltersProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedFilters(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &Filters{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestEnvironmentProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedEnvironment(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Environment{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestEnvironmentMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedEnvironment(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &Environment{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkEnvironmentProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*Environment, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedEnvironment(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkEnvironmentProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedEnvironment(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &Environment{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestEnvironment_VariableProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedEnvironment_Variable(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Environment_Variable{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestEnvironment_VariableMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedEnvironment_Variable(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &Environment_Variable{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkEnvironment_VariableProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*Environment_Variable, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedEnvironment_Variable(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkEnvironment_VariableProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedEnvironment_Variable(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &Environment_Variable{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestParameterProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedParameter(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Parameter{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestParameterMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedParameter(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &Parameter{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkParameterProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*Parameter, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedParameter(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkParameterProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedParameter(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &Parameter{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestParametersProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedParameters(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Parameters{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestParametersMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedParameters(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &Parameters{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkParametersProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*Parameters, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedParameters(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkParametersProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedParameters(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &Parameters{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestCredentialProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedCredential(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Credential{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestCredentialMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedCredential(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &Credential{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkCredentialProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*Credential, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedCredential(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkCredentialProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedCredential(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &Credential{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestCredentialsProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedCredentials(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Credentials{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestCredentialsMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedCredentials(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &Credentials{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkCredentialsProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*Credentials, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedCredentials(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkCredentialsProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedCredentials(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &Credentials{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestACLProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedACL(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &ACL{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestACLMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedACL(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &ACL{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkACLProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*ACL, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedACL(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkACLProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedACL(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &ACL{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestACL_EntityProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedACL_Entity(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &ACL_Entity{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestACL_EntityMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedACL_Entity(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &ACL_Entity{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkACL_EntityProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*ACL_Entity, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedACL_Entity(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkACL_EntityProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedACL_Entity(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &ACL_Entity{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestACL_RegisterFrameworkProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedACL_RegisterFramework(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &ACL_RegisterFramework{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestACL_RegisterFrameworkMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedACL_RegisterFramework(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &ACL_RegisterFramework{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkACL_RegisterFrameworkProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*ACL_RegisterFramework, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedACL_RegisterFramework(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkACL_RegisterFrameworkProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedACL_RegisterFramework(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &ACL_RegisterFramework{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestACL_RunTaskProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedACL_RunTask(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &ACL_RunTask{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestACL_RunTaskMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedACL_RunTask(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &ACL_RunTask{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkACL_RunTaskProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*ACL_RunTask, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedACL_RunTask(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkACL_RunTaskProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedACL_RunTask(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &ACL_RunTask{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestACL_ShutdownFrameworkProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedACL_ShutdownFramework(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &ACL_ShutdownFramework{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestACL_ShutdownFrameworkMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedACL_ShutdownFramework(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &ACL_ShutdownFramework{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkACL_ShutdownFrameworkProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*ACL_ShutdownFramework, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedACL_ShutdownFramework(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkACL_ShutdownFrameworkProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedACL_ShutdownFramework(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &ACL_ShutdownFramework{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestACLsProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedACLs(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &ACLs{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestACLsMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedACLs(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &ACLs{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkACLsProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*ACLs, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedACLs(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkACLsProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedACLs(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &ACLs{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestRateLimitProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedRateLimit(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &RateLimit{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestRateLimitMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedRateLimit(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &RateLimit{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkRateLimitProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*RateLimit, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedRateLimit(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkRateLimitProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedRateLimit(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &RateLimit{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestRateLimitsProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedRateLimits(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &RateLimits{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestRateLimitsMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedRateLimits(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &RateLimits{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkRateLimitsProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*RateLimits, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedRateLimits(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkRateLimitsProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedRateLimits(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &RateLimits{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestVolumeProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedVolume(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Volume{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestVolumeMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedVolume(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &Volume{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkVolumeProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*Volume, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedVolume(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkVolumeProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedVolume(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &Volume{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestContainerInfoProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedContainerInfo(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &ContainerInfo{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestContainerInfoMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedContainerInfo(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &ContainerInfo{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkContainerInfoProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*ContainerInfo, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedContainerInfo(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkContainerInfoProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedContainerInfo(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &ContainerInfo{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestContainerInfo_DockerInfoProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedContainerInfo_DockerInfo(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &ContainerInfo_DockerInfo{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestContainerInfo_DockerInfoMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedContainerInfo_DockerInfo(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &ContainerInfo_DockerInfo{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkContainerInfo_DockerInfoProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*ContainerInfo_DockerInfo, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedContainerInfo_DockerInfo(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkContainerInfo_DockerInfoProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedContainerInfo_DockerInfo(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &ContainerInfo_DockerInfo{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestContainerInfo_DockerInfo_PortMappingProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedContainerInfo_DockerInfo_PortMapping(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &ContainerInfo_DockerInfo_PortMapping{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestContainerInfo_DockerInfo_PortMappingMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedContainerInfo_DockerInfo_PortMapping(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &ContainerInfo_DockerInfo_PortMapping{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkContainerInfo_DockerInfo_PortMappingProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*ContainerInfo_DockerInfo_PortMapping, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedContainerInfo_DockerInfo_PortMapping(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkContainerInfo_DockerInfo_PortMappingProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedContainerInfo_DockerInfo_PortMapping(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &ContainerInfo_DockerInfo_PortMapping{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestLabelsProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedLabels(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Labels{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestLabelsMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedLabels(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &Labels{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkLabelsProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*Labels, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedLabels(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkLabelsProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedLabels(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &Labels{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestLabelProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedLabel(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Label{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestLabelMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedLabel(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &Label{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkLabelProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*Label, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedLabel(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkLabelProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedLabel(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &Label{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestPortProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedPort(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Port{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestPortMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedPort(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &Port{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkPortProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*Port, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedPort(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkPortProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedPort(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &Port{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestPortsProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedPorts(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Ports{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestPortsMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedPorts(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &Ports{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkPortsProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*Ports, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedPorts(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkPortsProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedPorts(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &Ports{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestDiscoveryInfoProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedDiscoveryInfo(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &DiscoveryInfo{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestDiscoveryInfoMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedDiscoveryInfo(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &DiscoveryInfo{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkDiscoveryInfoProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*DiscoveryInfo, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedDiscoveryInfo(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkDiscoveryInfoProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedDiscoveryInfo(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &DiscoveryInfo{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestFrameworkIDJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedFrameworkID(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &FrameworkID{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestOfferIDJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedOfferID(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &OfferID{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestSlaveIDJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedSlaveID(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &SlaveID{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestTaskIDJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedTaskID(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &TaskID{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestExecutorIDJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedExecutorID(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &ExecutorID{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestContainerIDJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedContainerID(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &ContainerID{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestFrameworkInfoJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedFrameworkInfo(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &FrameworkInfo{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestHealthCheckJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedHealthCheck(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &HealthCheck{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestHealthCheck_HTTPJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedHealthCheck_HTTP(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &HealthCheck_HTTP{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestCommandInfoJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedCommandInfo(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &CommandInfo{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestCommandInfo_URIJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedCommandInfo_URI(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &CommandInfo_URI{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestCommandInfo_ContainerInfoJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedCommandInfo_ContainerInfo(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &CommandInfo_ContainerInfo{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestExecutorInfoJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedExecutorInfo(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &ExecutorInfo{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestMasterInfoJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedMasterInfo(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &MasterInfo{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestSlaveInfoJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedSlaveInfo(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &SlaveInfo{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestValueJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedValue(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Value{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestValue_ScalarJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedValue_Scalar(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Value_Scalar{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestValue_RangeJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedValue_Range(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Value_Range{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestValue_RangesJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedValue_Ranges(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Value_Ranges{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestValue_SetJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedValue_Set(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Value_Set{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestValue_TextJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedValue_Text(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Value_Text{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestAttributeJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedAttribute(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Attribute{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestResourceJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedResource(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Resource{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestResource_DiskInfoJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedResource_DiskInfo(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Resource_DiskInfo{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestResource_DiskInfo_PersistenceJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedResource_DiskInfo_Persistence(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Resource_DiskInfo_Persistence{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestResourceStatisticsJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedResourceStatistics(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &ResourceStatistics{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestResourceUsageJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedResourceUsage(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &ResourceUsage{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestPerfStatisticsJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedPerfStatistics(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &PerfStatistics{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestRequestJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedRequest(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Request{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestOfferJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedOffer(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Offer{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestOffer_OperationJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedOffer_Operation(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Offer_Operation{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestOffer_Operation_LaunchJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedOffer_Operation_Launch(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Offer_Operation_Launch{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestOffer_Operation_ReserveJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedOffer_Operation_Reserve(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Offer_Operation_Reserve{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestOffer_Operation_UnreserveJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedOffer_Operation_Unreserve(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Offer_Operation_Unreserve{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestOffer_Operation_CreateJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedOffer_Operation_Create(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Offer_Operation_Create{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestOffer_Operation_DestroyJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedOffer_Operation_Destroy(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Offer_Operation_Destroy{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestTaskInfoJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedTaskInfo(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &TaskInfo{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestTaskStatusJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedTaskStatus(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &TaskStatus{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestFiltersJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedFilters(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Filters{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestEnvironmentJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedEnvironment(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Environment{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestEnvironment_VariableJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedEnvironment_Variable(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Environment_Variable{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestParameterJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedParameter(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Parameter{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestParametersJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedParameters(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Parameters{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestCredentialJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedCredential(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Credential{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestCredentialsJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedCredentials(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Credentials{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestACLJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedACL(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &ACL{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestACL_EntityJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedACL_Entity(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &ACL_Entity{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestACL_RegisterFrameworkJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedACL_RegisterFramework(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &ACL_RegisterFramework{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestACL_RunTaskJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedACL_RunTask(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &ACL_RunTask{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestACL_ShutdownFrameworkJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedACL_ShutdownFramework(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &ACL_ShutdownFramework{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestACLsJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedACLs(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &ACLs{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestRateLimitJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedRateLimit(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &RateLimit{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestRateLimitsJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedRateLimits(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &RateLimits{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestVolumeJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedVolume(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Volume{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestContainerInfoJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedContainerInfo(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &ContainerInfo{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestContainerInfo_DockerInfoJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedContainerInfo_DockerInfo(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &ContainerInfo_DockerInfo{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestContainerInfo_DockerInfo_PortMappingJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedContainerInfo_DockerInfo_PortMapping(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &ContainerInfo_DockerInfo_PortMapping{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestLabelsJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedLabels(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Labels{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestLabelJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedLabel(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Label{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestPortJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedPort(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Port{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestPortsJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedPorts(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Ports{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestDiscoveryInfoJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedDiscoveryInfo(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &DiscoveryInfo{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestFrameworkIDProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedFrameworkID(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &FrameworkID{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestFrameworkIDProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedFrameworkID(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &FrameworkID{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestOfferIDProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedOfferID(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &OfferID{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestOfferIDProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedOfferID(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &OfferID{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestSlaveIDProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedSlaveID(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &SlaveID{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestSlaveIDProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedSlaveID(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &SlaveID{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestTaskIDProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedTaskID(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &TaskID{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestTaskIDProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedTaskID(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &TaskID{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestExecutorIDProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedExecutorID(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &ExecutorID{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestExecutorIDProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedExecutorID(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &ExecutorID{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestContainerIDProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedContainerID(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &ContainerID{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestContainerIDProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedContainerID(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &ContainerID{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestFrameworkInfoProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedFrameworkInfo(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &FrameworkInfo{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestFrameworkInfoProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedFrameworkInfo(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &FrameworkInfo{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestHealthCheckProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedHealthCheck(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &HealthCheck{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestHealthCheckProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedHealthCheck(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &HealthCheck{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestHealthCheck_HTTPProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedHealthCheck_HTTP(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &HealthCheck_HTTP{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestHealthCheck_HTTPProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedHealthCheck_HTTP(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &HealthCheck_HTTP{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestCommandInfoProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedCommandInfo(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &CommandInfo{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestCommandInfoProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedCommandInfo(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &CommandInfo{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestCommandInfo_URIProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedCommandInfo_URI(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &CommandInfo_URI{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestCommandInfo_URIProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedCommandInfo_URI(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &CommandInfo_URI{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestCommandInfo_ContainerInfoProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedCommandInfo_ContainerInfo(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &CommandInfo_ContainerInfo{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestCommandInfo_ContainerInfoProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedCommandInfo_ContainerInfo(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &CommandInfo_ContainerInfo{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestExecutorInfoProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedExecutorInfo(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &ExecutorInfo{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestExecutorInfoProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedExecutorInfo(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &ExecutorInfo{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestMasterInfoProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedMasterInfo(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &MasterInfo{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestMasterInfoProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedMasterInfo(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &MasterInfo{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestSlaveInfoProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedSlaveInfo(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &SlaveInfo{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestSlaveInfoProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedSlaveInfo(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &SlaveInfo{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestValueProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedValue(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &Value{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestValueProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedValue(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &Value{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestValue_ScalarProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedValue_Scalar(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &Value_Scalar{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestValue_ScalarProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedValue_Scalar(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &Value_Scalar{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestValue_RangeProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedValue_Range(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &Value_Range{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestValue_RangeProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedValue_Range(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &Value_Range{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestValue_RangesProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedValue_Ranges(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &Value_Ranges{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestValue_RangesProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedValue_Ranges(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &Value_Ranges{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestValue_SetProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedValue_Set(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &Value_Set{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestValue_SetProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedValue_Set(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &Value_Set{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestValue_TextProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedValue_Text(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &Value_Text{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestValue_TextProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedValue_Text(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &Value_Text{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestAttributeProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedAttribute(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &Attribute{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestAttributeProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedAttribute(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &Attribute{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestResourceProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedResource(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &Resource{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestResourceProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedResource(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &Resource{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestResource_DiskInfoProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedResource_DiskInfo(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &Resource_DiskInfo{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestResource_DiskInfoProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedResource_DiskInfo(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &Resource_DiskInfo{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestResource_DiskInfo_PersistenceProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedResource_DiskInfo_Persistence(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &Resource_DiskInfo_Persistence{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestResource_DiskInfo_PersistenceProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedResource_DiskInfo_Persistence(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &Resource_DiskInfo_Persistence{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestResourceStatisticsProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedResourceStatistics(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &ResourceStatistics{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestResourceStatisticsProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedResourceStatistics(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &ResourceStatistics{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestResourceUsageProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedResourceUsage(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &ResourceUsage{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestResourceUsageProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedResourceUsage(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &ResourceUsage{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestPerfStatisticsProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedPerfStatistics(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &PerfStatistics{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestPerfStatisticsProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedPerfStatistics(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &PerfStatistics{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestRequestProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedRequest(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &Request{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestRequestProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedRequest(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &Request{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestOfferProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedOffer(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &Offer{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestOfferProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedOffer(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &Offer{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestOffer_OperationProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedOffer_Operation(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &Offer_Operation{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestOffer_OperationProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedOffer_Operation(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &Offer_Operation{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestOffer_Operation_LaunchProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedOffer_Operation_Launch(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &Offer_Operation_Launch{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestOffer_Operation_LaunchProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedOffer_Operation_Launch(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &Offer_Operation_Launch{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestOffer_Operation_ReserveProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedOffer_Operation_Reserve(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &Offer_Operation_Reserve{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestOffer_Operation_ReserveProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedOffer_Operation_Reserve(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &Offer_Operation_Reserve{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestOffer_Operation_UnreserveProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedOffer_Operation_Unreserve(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &Offer_Operation_Unreserve{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestOffer_Operation_UnreserveProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedOffer_Operation_Unreserve(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &Offer_Operation_Unreserve{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestOffer_Operation_CreateProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedOffer_Operation_Create(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &Offer_Operation_Create{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestOffer_Operation_CreateProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedOffer_Operation_Create(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &Offer_Operation_Create{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestOffer_Operation_DestroyProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedOffer_Operation_Destroy(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &Offer_Operation_Destroy{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestOffer_Operation_DestroyProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedOffer_Operation_Destroy(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &Offer_Operation_Destroy{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestTaskInfoProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedTaskInfo(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &TaskInfo{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestTaskInfoProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedTaskInfo(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &TaskInfo{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestTaskStatusProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedTaskStatus(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &TaskStatus{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestTaskStatusProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedTaskStatus(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &TaskStatus{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestFiltersProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedFilters(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &Filters{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestFiltersProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedFilters(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &Filters{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestEnvironmentProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedEnvironment(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &Environment{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestEnvironmentProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedEnvironment(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &Environment{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestEnvironment_VariableProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedEnvironment_Variable(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &Environment_Variable{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestEnvironment_VariableProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedEnvironment_Variable(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &Environment_Variable{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestParameterProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedParameter(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &Parameter{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestParameterProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedParameter(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &Parameter{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestParametersProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedParameters(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &Parameters{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestParametersProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedParameters(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &Parameters{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestCredentialProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedCredential(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &Credential{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestCredentialProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedCredential(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &Credential{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestCredentialsProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedCredentials(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &Credentials{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestCredentialsProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedCredentials(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &Credentials{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestACLProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedACL(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &ACL{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestACLProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedACL(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &ACL{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestACL_EntityProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedACL_Entity(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &ACL_Entity{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestACL_EntityProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedACL_Entity(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &ACL_Entity{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestACL_RegisterFrameworkProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedACL_RegisterFramework(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &ACL_RegisterFramework{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestACL_RegisterFrameworkProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedACL_RegisterFramework(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &ACL_RegisterFramework{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestACL_RunTaskProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedACL_RunTask(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &ACL_RunTask{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestACL_RunTaskProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedACL_RunTask(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &ACL_RunTask{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestACL_ShutdownFrameworkProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedACL_ShutdownFramework(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &ACL_ShutdownFramework{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestACL_ShutdownFrameworkProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedACL_ShutdownFramework(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &ACL_ShutdownFramework{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestACLsProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedACLs(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &ACLs{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestACLsProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedACLs(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &ACLs{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestRateLimitProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedRateLimit(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &RateLimit{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestRateLimitProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedRateLimit(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &RateLimit{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestRateLimitsProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedRateLimits(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &RateLimits{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestRateLimitsProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedRateLimits(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &RateLimits{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestVolumeProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedVolume(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &Volume{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestVolumeProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedVolume(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &Volume{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestContainerInfoProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedContainerInfo(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &ContainerInfo{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestContainerInfoProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedContainerInfo(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &ContainerInfo{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestContainerInfo_DockerInfoProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedContainerInfo_DockerInfo(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &ContainerInfo_DockerInfo{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestContainerInfo_DockerInfoProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedContainerInfo_DockerInfo(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &ContainerInfo_DockerInfo{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestContainerInfo_DockerInfo_PortMappingProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedContainerInfo_DockerInfo_PortMapping(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &ContainerInfo_DockerInfo_PortMapping{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestContainerInfo_DockerInfo_PortMappingProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedContainerInfo_DockerInfo_PortMapping(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &ContainerInfo_DockerInfo_PortMapping{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestLabelsProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedLabels(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &Labels{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestLabelsProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedLabels(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &Labels{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestLabelProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedLabel(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &Label{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestLabelProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedLabel(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &Label{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestPortProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedPort(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &Port{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestPortProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedPort(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &Port{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestPortsProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedPorts(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &Ports{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestPortsProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedPorts(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &Ports{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestDiscoveryInfoProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedDiscoveryInfo(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &DiscoveryInfo{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestDiscoveryInfoProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedDiscoveryInfo(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &DiscoveryInfo{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestFrameworkIDStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedFrameworkID(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestOfferIDStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedOfferID(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestSlaveIDStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedSlaveID(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestTaskIDStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedTaskID(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestExecutorIDStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedExecutorID(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestContainerIDStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedContainerID(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestFrameworkInfoStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedFrameworkInfo(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestHealthCheckStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedHealthCheck(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestHealthCheck_HTTPStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedHealthCheck_HTTP(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestCommandInfoStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedCommandInfo(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestCommandInfo_URIStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedCommandInfo_URI(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestCommandInfo_ContainerInfoStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedCommandInfo_ContainerInfo(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestExecutorInfoStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedExecutorInfo(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestMasterInfoStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedMasterInfo(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestSlaveInfoStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedSlaveInfo(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestValueStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedValue(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestValue_ScalarStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedValue_Scalar(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestValue_RangeStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedValue_Range(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestValue_RangesStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedValue_Ranges(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestValue_SetStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedValue_Set(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestValue_TextStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedValue_Text(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestAttributeStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedAttribute(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestResourceStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedResource(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestResource_DiskInfoStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedResource_DiskInfo(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestResource_DiskInfo_PersistenceStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedResource_DiskInfo_Persistence(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestResourceStatisticsStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedResourceStatistics(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestResourceUsageStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedResourceUsage(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestPerfStatisticsStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedPerfStatistics(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestRequestStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedRequest(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestOfferStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedOffer(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestOffer_OperationStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedOffer_Operation(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestOffer_Operation_LaunchStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedOffer_Operation_Launch(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestOffer_Operation_ReserveStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedOffer_Operation_Reserve(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestOffer_Operation_UnreserveStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedOffer_Operation_Unreserve(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestOffer_Operation_CreateStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedOffer_Operation_Create(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestOffer_Operation_DestroyStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedOffer_Operation_Destroy(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestTaskInfoStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedTaskInfo(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestTaskStatusStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedTaskStatus(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestFiltersStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedFilters(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestEnvironmentStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedEnvironment(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestEnvironment_VariableStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedEnvironment_Variable(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestParameterStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedParameter(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestParametersStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedParameters(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestCredentialStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedCredential(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestCredentialsStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedCredentials(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestACLStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedACL(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestACL_EntityStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedACL_Entity(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestACL_RegisterFrameworkStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedACL_RegisterFramework(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestACL_RunTaskStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedACL_RunTask(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestACL_ShutdownFrameworkStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedACL_ShutdownFramework(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestACLsStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedACLs(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestRateLimitStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedRateLimit(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestRateLimitsStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedRateLimits(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestVolumeStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedVolume(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestContainerInfoStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedContainerInfo(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestContainerInfo_DockerInfoStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedContainerInfo_DockerInfo(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestContainerInfo_DockerInfo_PortMappingStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedContainerInfo_DockerInfo_PortMapping(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestLabelsStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedLabels(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestLabelStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedLabel(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestPortStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedPort(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestPortsStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedPorts(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestDiscoveryInfoStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedDiscoveryInfo(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestFrameworkIDSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedFrameworkID(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkFrameworkIDSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*FrameworkID, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedFrameworkID(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestOfferIDSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedOfferID(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkOfferIDSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*OfferID, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedOfferID(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestSlaveIDSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedSlaveID(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkSlaveIDSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*SlaveID, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedSlaveID(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestTaskIDSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedTaskID(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkTaskIDSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*TaskID, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedTaskID(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestExecutorIDSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedExecutorID(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkExecutorIDSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*ExecutorID, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedExecutorID(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestContainerIDSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedContainerID(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkContainerIDSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*ContainerID, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedContainerID(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestFrameworkInfoSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedFrameworkInfo(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkFrameworkInfoSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*FrameworkInfo, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedFrameworkInfo(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestHealthCheckSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedHealthCheck(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkHealthCheckSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*HealthCheck, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedHealthCheck(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestHealthCheck_HTTPSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedHealthCheck_HTTP(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkHealthCheck_HTTPSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*HealthCheck_HTTP, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedHealthCheck_HTTP(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestCommandInfoSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedCommandInfo(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkCommandInfoSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*CommandInfo, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedCommandInfo(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestCommandInfo_URISize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedCommandInfo_URI(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkCommandInfo_URISize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*CommandInfo_URI, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedCommandInfo_URI(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestCommandInfo_ContainerInfoSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedCommandInfo_ContainerInfo(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkCommandInfo_ContainerInfoSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*CommandInfo_ContainerInfo, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedCommandInfo_ContainerInfo(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestExecutorInfoSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedExecutorInfo(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkExecutorInfoSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*ExecutorInfo, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedExecutorInfo(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestMasterInfoSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedMasterInfo(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkMasterInfoSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*MasterInfo, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedMasterInfo(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestSlaveInfoSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedSlaveInfo(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkSlaveInfoSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*SlaveInfo, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedSlaveInfo(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestValueSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedValue(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkValueSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*Value, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedValue(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestValue_ScalarSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedValue_Scalar(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkValue_ScalarSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*Value_Scalar, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedValue_Scalar(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestValue_RangeSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedValue_Range(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkValue_RangeSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*Value_Range, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedValue_Range(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestValue_RangesSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedValue_Ranges(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkValue_RangesSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*Value_Ranges, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedValue_Ranges(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestValue_SetSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedValue_Set(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkValue_SetSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*Value_Set, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedValue_Set(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestValue_TextSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedValue_Text(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkValue_TextSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*Value_Text, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedValue_Text(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestAttributeSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedAttribute(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkAttributeSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*Attribute, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedAttribute(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestResourceSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedResource(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkResourceSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*Resource, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedResource(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestResource_DiskInfoSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedResource_DiskInfo(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkResource_DiskInfoSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*Resource_DiskInfo, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedResource_DiskInfo(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestResource_DiskInfo_PersistenceSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedResource_DiskInfo_Persistence(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkResource_DiskInfo_PersistenceSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*Resource_DiskInfo_Persistence, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedResource_DiskInfo_Persistence(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestResourceStatisticsSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedResourceStatistics(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkResourceStatisticsSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*ResourceStatistics, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedResourceStatistics(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestResourceUsageSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedResourceUsage(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkResourceUsageSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*ResourceUsage, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedResourceUsage(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestPerfStatisticsSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedPerfStatistics(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkPerfStatisticsSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*PerfStatistics, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedPerfStatistics(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestRequestSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedRequest(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkRequestSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*Request, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedRequest(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestOfferSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedOffer(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkOfferSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*Offer, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedOffer(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestOffer_OperationSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedOffer_Operation(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkOffer_OperationSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*Offer_Operation, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedOffer_Operation(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestOffer_Operation_LaunchSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedOffer_Operation_Launch(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkOffer_Operation_LaunchSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*Offer_Operation_Launch, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedOffer_Operation_Launch(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestOffer_Operation_ReserveSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedOffer_Operation_Reserve(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkOffer_Operation_ReserveSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*Offer_Operation_Reserve, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedOffer_Operation_Reserve(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestOffer_Operation_UnreserveSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedOffer_Operation_Unreserve(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkOffer_Operation_UnreserveSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*Offer_Operation_Unreserve, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedOffer_Operation_Unreserve(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestOffer_Operation_CreateSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedOffer_Operation_Create(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkOffer_Operation_CreateSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*Offer_Operation_Create, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedOffer_Operation_Create(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestOffer_Operation_DestroySize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedOffer_Operation_Destroy(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkOffer_Operation_DestroySize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*Offer_Operation_Destroy, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedOffer_Operation_Destroy(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestTaskInfoSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedTaskInfo(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkTaskInfoSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*TaskInfo, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedTaskInfo(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestTaskStatusSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedTaskStatus(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkTaskStatusSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*TaskStatus, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedTaskStatus(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestFiltersSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedFilters(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkFiltersSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*Filters, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedFilters(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestEnvironmentSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedEnvironment(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkEnvironmentSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*Environment, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedEnvironment(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestEnvironment_VariableSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedEnvironment_Variable(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkEnvironment_VariableSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*Environment_Variable, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedEnvironment_Variable(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestParameterSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedParameter(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkParameterSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*Parameter, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedParameter(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestParametersSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedParameters(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkParametersSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*Parameters, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedParameters(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestCredentialSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedCredential(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkCredentialSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*Credential, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedCredential(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestCredentialsSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedCredentials(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkCredentialsSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*Credentials, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedCredentials(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestACLSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedACL(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkACLSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*ACL, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedACL(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestACL_EntitySize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedACL_Entity(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkACL_EntitySize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*ACL_Entity, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedACL_Entity(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestACL_RegisterFrameworkSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedACL_RegisterFramework(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkACL_RegisterFrameworkSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*ACL_RegisterFramework, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedACL_RegisterFramework(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestACL_RunTaskSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedACL_RunTask(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkACL_RunTaskSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*ACL_RunTask, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedACL_RunTask(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestACL_ShutdownFrameworkSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedACL_ShutdownFramework(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkACL_ShutdownFrameworkSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*ACL_ShutdownFramework, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedACL_ShutdownFramework(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestACLsSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedACLs(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkACLsSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*ACLs, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedACLs(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestRateLimitSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedRateLimit(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkRateLimitSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*RateLimit, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedRateLimit(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestRateLimitsSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedRateLimits(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkRateLimitsSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*RateLimits, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedRateLimits(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestVolumeSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedVolume(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkVolumeSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*Volume, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedVolume(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestContainerInfoSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedContainerInfo(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkContainerInfoSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*ContainerInfo, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedContainerInfo(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestContainerInfo_DockerInfoSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedContainerInfo_DockerInfo(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkContainerInfo_DockerInfoSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*ContainerInfo_DockerInfo, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedContainerInfo_DockerInfo(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestContainerInfo_DockerInfo_PortMappingSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedContainerInfo_DockerInfo_PortMapping(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkContainerInfo_DockerInfo_PortMappingSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*ContainerInfo_DockerInfo_PortMapping, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedContainerInfo_DockerInfo_PortMapping(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestLabelsSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedLabels(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkLabelsSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*Labels, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedLabels(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestLabelSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedLabel(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkLabelSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*Label, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedLabel(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestPortSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedPort(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkPortSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*Port, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedPort(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestPortsSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedPorts(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkPortsSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*Ports, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedPorts(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestDiscoveryInfoSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedDiscoveryInfo(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkDiscoveryInfoSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*DiscoveryInfo, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedDiscoveryInfo(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestFrameworkIDGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedFrameworkID(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestOfferIDGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedOfferID(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestSlaveIDGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedSlaveID(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestTaskIDGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedTaskID(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestExecutorIDGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedExecutorID(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestContainerIDGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedContainerID(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestFrameworkInfoGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedFrameworkInfo(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestHealthCheckGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedHealthCheck(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestHealthCheck_HTTPGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedHealthCheck_HTTP(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestCommandInfoGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedCommandInfo(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestCommandInfo_URIGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedCommandInfo_URI(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestCommandInfo_ContainerInfoGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedCommandInfo_ContainerInfo(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestExecutorInfoGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedExecutorInfo(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestMasterInfoGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedMasterInfo(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestSlaveInfoGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedSlaveInfo(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestValueGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedValue(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestValue_ScalarGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedValue_Scalar(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestValue_RangeGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedValue_Range(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestValue_RangesGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedValue_Ranges(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestValue_SetGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedValue_Set(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestValue_TextGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedValue_Text(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestAttributeGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedAttribute(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestResourceGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedResource(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestResource_DiskInfoGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedResource_DiskInfo(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestResource_DiskInfo_PersistenceGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedResource_DiskInfo_Persistence(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestResourceStatisticsGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedResourceStatistics(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestResourceUsageGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedResourceUsage(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestPerfStatisticsGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedPerfStatistics(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestRequestGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedRequest(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestOfferGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedOffer(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestOffer_OperationGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedOffer_Operation(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestOffer_Operation_LaunchGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedOffer_Operation_Launch(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestOffer_Operation_ReserveGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedOffer_Operation_Reserve(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestOffer_Operation_UnreserveGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedOffer_Operation_Unreserve(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestOffer_Operation_CreateGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedOffer_Operation_Create(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestOffer_Operation_DestroyGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedOffer_Operation_Destroy(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestTaskInfoGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedTaskInfo(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestTaskStatusGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedTaskStatus(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestFiltersGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedFilters(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestEnvironmentGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedEnvironment(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestEnvironment_VariableGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedEnvironment_Variable(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestParameterGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedParameter(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestParametersGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedParameters(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestCredentialGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedCredential(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestCredentialsGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedCredentials(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestACLGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedACL(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestACL_EntityGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedACL_Entity(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestACL_RegisterFrameworkGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedACL_RegisterFramework(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestACL_RunTaskGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedACL_RunTask(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestACL_ShutdownFrameworkGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedACL_ShutdownFramework(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestACLsGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedACLs(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestRateLimitGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedRateLimit(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestRateLimitsGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedRateLimits(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestVolumeGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedVolume(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestContainerInfoGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedContainerInfo(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestContainerInfo_DockerInfoGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedContainerInfo_DockerInfo(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestContainerInfo_DockerInfo_PortMappingGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedContainerInfo_DockerInfo_PortMapping(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestLabelsGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedLabels(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestLabelGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedLabel(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestPortGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedPort(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestPortsGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedPorts(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestDiscoveryInfoGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedDiscoveryInfo(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestFrameworkIDVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedFrameworkID(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &FrameworkID{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestOfferIDVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedOfferID(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &OfferID{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestSlaveIDVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedSlaveID(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &SlaveID{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestTaskIDVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedTaskID(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &TaskID{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestExecutorIDVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedExecutorID(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &ExecutorID{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestContainerIDVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedContainerID(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &ContainerID{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestFrameworkInfoVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedFrameworkInfo(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &FrameworkInfo{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestHealthCheckVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedHealthCheck(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &HealthCheck{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestHealthCheck_HTTPVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedHealthCheck_HTTP(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &HealthCheck_HTTP{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestCommandInfoVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedCommandInfo(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &CommandInfo{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestCommandInfo_URIVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedCommandInfo_URI(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &CommandInfo_URI{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestCommandInfo_ContainerInfoVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedCommandInfo_ContainerInfo(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &CommandInfo_ContainerInfo{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestExecutorInfoVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedExecutorInfo(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &ExecutorInfo{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestMasterInfoVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedMasterInfo(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &MasterInfo{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestSlaveInfoVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedSlaveInfo(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &SlaveInfo{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestValueVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedValue(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Value{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestValue_ScalarVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedValue_Scalar(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Value_Scalar{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestValue_RangeVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedValue_Range(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Value_Range{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestValue_RangesVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedValue_Ranges(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Value_Ranges{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestValue_SetVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedValue_Set(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Value_Set{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestValue_TextVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedValue_Text(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Value_Text{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestAttributeVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedAttribute(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Attribute{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestResourceVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedResource(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Resource{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestResource_DiskInfoVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedResource_DiskInfo(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Resource_DiskInfo{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestResource_DiskInfo_PersistenceVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedResource_DiskInfo_Persistence(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Resource_DiskInfo_Persistence{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestResourceStatisticsVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedResourceStatistics(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &ResourceStatistics{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestResourceUsageVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedResourceUsage(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &ResourceUsage{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestPerfStatisticsVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedPerfStatistics(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &PerfStatistics{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestRequestVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedRequest(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Request{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestOfferVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedOffer(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Offer{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestOffer_OperationVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedOffer_Operation(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Offer_Operation{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestOffer_Operation_LaunchVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedOffer_Operation_Launch(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Offer_Operation_Launch{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestOffer_Operation_ReserveVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedOffer_Operation_Reserve(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Offer_Operation_Reserve{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestOffer_Operation_UnreserveVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedOffer_Operation_Unreserve(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Offer_Operation_Unreserve{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestOffer_Operation_CreateVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedOffer_Operation_Create(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Offer_Operation_Create{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestOffer_Operation_DestroyVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedOffer_Operation_Destroy(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Offer_Operation_Destroy{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestTaskInfoVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedTaskInfo(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &TaskInfo{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestTaskStatusVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedTaskStatus(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &TaskStatus{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestFiltersVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedFilters(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Filters{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestEnvironmentVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedEnvironment(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Environment{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestEnvironment_VariableVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedEnvironment_Variable(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Environment_Variable{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestParameterVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedParameter(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Parameter{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestParametersVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedParameters(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Parameters{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestCredentialVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedCredential(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Credential{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestCredentialsVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedCredentials(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Credentials{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestACLVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedACL(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &ACL{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestACL_EntityVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedACL_Entity(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &ACL_Entity{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestACL_RegisterFrameworkVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedACL_RegisterFramework(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &ACL_RegisterFramework{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestACL_RunTaskVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedACL_RunTask(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &ACL_RunTask{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestACL_ShutdownFrameworkVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedACL_ShutdownFramework(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &ACL_ShutdownFramework{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestACLsVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedACLs(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &ACLs{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestRateLimitVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedRateLimit(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &RateLimit{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestRateLimitsVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedRateLimits(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &RateLimits{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestVolumeVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedVolume(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Volume{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestContainerInfoVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedContainerInfo(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &ContainerInfo{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestContainerInfo_DockerInfoVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedContainerInfo_DockerInfo(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &ContainerInfo_DockerInfo{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestContainerInfo_DockerInfo_PortMappingVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedContainerInfo_DockerInfo_PortMapping(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &ContainerInfo_DockerInfo_PortMapping{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestLabelsVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedLabels(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Labels{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestLabelVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedLabel(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Label{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestPortVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedPort(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Port{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestPortsVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedPorts(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &Ports{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestDiscoveryInfoVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedDiscoveryInfo(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &DiscoveryInfo{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}

//These tests are generated by github.com/gogo/protobuf/plugin/testgen
